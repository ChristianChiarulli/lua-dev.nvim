--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- Gets the paths contained in 'runtimepath'.
--- @return any #List of paths
function vim.api.nvim_list_runtime_paths() end

-- Gets the current list of tabpage handles.
--- @return any #List of tabpage handles
function vim.api.nvim_list_tabpages() end

-- Gets a list of dictionaries representing attached UIs.
--- @return any #Array of UI dictionaries, each with these keys:
---     • "height" Requested height of the UI
---     • "width" Requested width of the UI
---     • "rgb" true if the UI uses RGB colors (false implies
---       |cterm-colors|)
---     • "ext_..." Requested UI extensions, see |ui-option|
---     • "chan" Channel id of remote UI (not present for TUI)
function vim.api.nvim_list_uis() end

-- Gets the current list of window handles.
--- @return any #List of window handles
function vim.api.nvim_list_wins() end

-- Sets the current editor state from the given |context| map.
--- @param dict dictionary #|Context| map.
function vim.api.nvim_load_context(dict) end

-- Notify the user with a message
--- @param msg string #Message to display to the user
--- @param log_level integer #The log level
--- @param opts dictionary #Reserved for future use.
function vim.api.nvim_notify(msg, log_level, opts) end

-- Open a terminal instance in a buffer
--- @param buffer buffer #the buffer to use (expected to be empty)
--- @param opts dictionary #Optional parameters. Reserved for future use.
--- @return any #Channel id, or 0 on error
function vim.api.nvim_open_term(buffer, opts) end

-- Open a new window.
--- @param buffer buffer #Buffer to display, or 0 for current buffer
--- @param enter boolean #Enter the window (make it the current window)
--- @param config dictionary #Map defining the window configuration. Keys:
---               • `relative`: Sets the window layout to "floating", placed
---                 at (row,col) coordinates relative to:
---                 • "editor" The global editor grid
---                 • "win" Window given by the `win` field, or
---                   current window.
---                 • "cursor" Cursor position in current window.
---
---               • `win` : |window-ID| for relative="win".
---               • `anchor`: Decides which corner of the float to place
---                 at (row,col):
---                 • "NW" northwest (default)
---                 • "NE" northeast
---                 • "SW" southwest
---                 • "SE" southeast
---
---               • `width` : Window width (in character cells).
---                 Minimum of 1.
---               • `height` : Window height (in character cells).
---                 Minimum of 1.
---               • `bufpos` : Places float relative to buffer
---                 text (only when relative="win"). Takes a tuple
---                 of zero-indexed [line, column]. `row` and
---                 `col` if given are applied relative to this
---                 position, else they default to `row=1` and
---                 `col=0` (thus like a tooltip near the buffer
---                 text).
---               • `row` : Row position in units of "screen cell
---                 height", may be fractional.
---               • `col` : Column position in units of "screen
---                 cell width", may be fractional.
---               • `focusable` : Enable focus by user actions
---                 (wincmds, mouse events). Defaults to true.
---                 Non-focusable windows can be entered by
---                 |nvim_set_current_win()|.
---               • `external` : GUI should display the window as
---                 an external top-level window. Currently
---                 accepts no other positioning configuration
---                 together with this.
---               • `style`: Configure the appearance of the window.
---                 Currently only takes one non-empty value:
---                 • "minimal" Nvim will display the window with
---                   many UI options disabled. This is useful
---                   when displaying a temporary float where the
---                   text should not be edited. Disables
---                   'number', 'relativenumber', 'cursorline',
---                   'cursorcolumn', 'foldcolumn', 'spell' and
---                   'list' options. 'signcolumn' is changed to
---                   `auto` and 'colorcolumn' is cleared. The
---                   end-of-buffer region is hidden by setting
---                   `eob` flag of 'fillchars' to a space char,
---                   and clearing the |EndOfBuffer| region in
---                   'winhighlight'.
---
---               • `border`: style of (optional) window border. This can
---                 either be a string or an array. the string
---                 values are:
---                 • "none" No border. This is the default
---                 • "single" a single line box
---                 • "double" a double line box
---                 • "shadow" a drop shadow effect by blending
---                   with the background. If it is an array it
---                   should be an array of eight items or any
---                   divisor of eight. The array will specifify
---                   the eight chars building up the border in a
---                   clockwise fashion starting with the top-left
---                   corner. As, an example, the double box style
---                   could be specified as: [ "╔", "═" ,"╗", "║",
---                   "╝", "═", "╚", "║" ] if the number of chars
---                   are less than eight, they will be repeated.
---                   Thus an ASCII border could be specified as:
---                   [ "/", "-", "\\", "|" ] or all chars the
---                   same as: [ "x" ] An empty string can be used
---                   to turn off a specific border, for instance:
---                   [ "", "", "", ">", "", "", "", "<" ] will
---                   only make vertical borders but not
---                   horizontal ones. By default `FloatBorder`
---                   highlight is used which links to `VertSplit`
---                   when not defined. It could also be specified
---                   by character: [ {"+", "MyCorner"}, {"x",
---                   "MyBorder"} ]
--- @return any #Window handle, or 0 on error
function vim.api.nvim_open_win(buffer, enter, config) end

-- Writes a message to the Vim output buffer. Does not append
-- "\n", the message is buffered (won't display) until a linefeed
-- is written.
--- @param str string #Message
function vim.api.nvim_out_write(str) end

-- Parse a VimL expression.
--- @param expr string #Expression to parse. Always treated as a
---                  single line.
--- @param flags string #Flags:
---                  • "m" if multiple expressions in a row are
---                    allowed (only the first one will be
---                    parsed),
---                  • "E" if EOC tokens are not allowed
---                    (determines whether they will stop parsing
---                    process or be recognized as an
---                    operator/space, though also yielding an
---                    error).
---                  • "l" when needing to start parsing with
---                    lvalues for ":let" or ":for". Common flag
---                    sets:
---                  • "m" to parse like for ":echo".
---                  • "E" to parse like for "<C-r>=".
---                  • empty string for ":call".
---                  • "lm" to parse for ":let".
--- @param highlight boolean #If true, return value will also include
---                  "highlight" key containing array of 4-tuples
---                  (arrays) (Integer, Integer, Integer, String),
---                  where first three numbers define the
---                  highlighted region and represent line,
---                  starting column and ending column (latter
---                  exclusive: one should highlight region
---                  [start_col, end_col)).
--- @return any #
---     • AST: top-level dictionary with these keys:
---       • "error": Dictionary with error, present only if parser
---         saw some error. Contains the following keys:
---         • "message": String, error message in printf format,
---           translated. Must contain exactly one "%.*s".
---         • "arg": String, error message argument.
---
---       • "len": Amount of bytes successfully parsed. With flags
---         equal to "" that should be equal to the length of expr
---         string. (“Sucessfully parsed” here means “participated
---         in AST creation”, not “till the first error”.)
---       • "ast": AST, either nil or a dictionary with these
---         keys:
---         • "type": node type, one of the value names from
---           ExprASTNodeType stringified without "kExprNode"
---           prefix.
---         • "start": a pair [line, column] describing where node
---           is "started" where "line" is always 0 (will not be 0
---           if you will be using nvim_parse_viml() on e.g.
---           ":let", but that is not present yet). Both elements
---           are Integers.
---         • "len": “length” of the node. This and "start" are
---           there for debugging purposes primary (debugging
---           parser and providing debug information).
---         • "children": a list of nodes described in top/"ast".
---           There always is zero, one or two children, key will
---           not be present if node has no children. Maximum
---           number of children may be found in node_maxchildren
---           array.
---
---
---     • Local values (present only for certain nodes):
---       • "scope": a single Integer, specifies scope for
---         "Option" and "PlainIdentifier" nodes. For "Option" it
---         is one of ExprOptScope values, for "PlainIdentifier"
---         it is one of ExprVarScope values.
---       • "ident": identifier (without scope, if any), present
---         for "Option", "PlainIdentifier", "PlainKey" and
---         "Environment" nodes.
---       • "name": Integer, register name (one character) or -1.
---         Only present for "Register" nodes.
---       • "cmp_type": String, comparison type, one of the value
---         names from ExprComparisonType, stringified without
---         "kExprCmp" prefix. Only present for "Comparison"
---         nodes.
---       • "ccs_strategy": String, case comparison strategy, one
---         of the value names from ExprCaseCompareStrategy,
---         stringified without "kCCStrategy" prefix. Only present
---         for "Comparison" nodes.
---       • "augmentation": String, augmentation type for
---         "Assignment" nodes. Is either an empty string, "Add",
---         "Subtract" or "Concat" for "=", "+=", "-=" or ".="
---         respectively.
---       • "invert": Boolean, true if result of comparison needs
---         to be inverted. Only present for "Comparison" nodes.
---       • "ivalue": Integer, integer value for "Integer" nodes.
---       • "fvalue": Float, floating-point value for "Float"
---         nodes.
---       • "svalue": String, value for "SingleQuotedString" and
---         "DoubleQuotedString" nodes.
function vim.api.nvim_parse_expression(expr, flags, highlight) end

